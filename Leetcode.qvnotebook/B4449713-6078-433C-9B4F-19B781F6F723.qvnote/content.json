{
  "title": "003. Longest Substring Without Repeating Characters",
  "cells": [
    {
      "type": "markdown",
      "data": "# 003 Longest Substring Without Repeating Characters\n\n-  **Array**+**Hash Table**+**String**\n\n## Description\n![IMAGE](quiver-image-url/94E282BE8B4C4E8CF48C86705FEFC066.jpg)\n\n\n\n## 1. Thought Line\n### (1) Bit manipulation for duplicate elements.\n\n\n\n## 2. Hash Table + String"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int res = 0;\n        set<char> setHash;\n        int loopStart = 0;\n\n        for (int i=0; !s.empty()&&i<=s.size()-1; ++i){\n            char chr = s[i];\n            if (setHash.find(chr) == setHash.end())\n                setHash.insert(chr);\n            else{\n                // calculate the none duplicate number in this term.\n                res = (setHash.size()>res)?setHash.size():res;\n                \n                // find out the index of which one leaded to this \n                // duplication issue.\n                for (int duplicateSpt = loopStart; duplicateSpt<=i-1; \t\n                     ++duplicateSpt)\n                {\n                    setHash.erase(s[duplicateSpt]);\n                    if (s[duplicateSpt]==chr){\n                        i = i-1;\n                        loopStart = duplicateSpt+1;\n                        break;\n                    }\n                }\n            }\n            \n        }\n        res = (s.size()-loopStart>res)?s.size()-loopStart:res;\n        return res;\n    }\n};"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}