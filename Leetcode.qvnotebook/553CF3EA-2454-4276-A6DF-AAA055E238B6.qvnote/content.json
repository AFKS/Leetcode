{
  "title": "035. Search Insert Position",
  "cells": [
    {
      "type": "markdown",
      "data": "# 035 Search Insert Position\n- **Binary Search**+array\n\n## Description\n![IMAGE](quiver-image-url/7C3DE7F9BF61C1E90D65A6E3236EE352.jpg)\n\n## 1. Thought line\n\n\n\n## 2. **Binary Search**+array"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "class Solution {\nprivate:\n    void binarySearchInsert(vector<int>& nums, int target, int st, int ed, int& res){\n        if (st>ed) return;\n        if (st==ed){\n            if (nums[st]<target) res  = st+1;\n            if (st==ed && nums[st]>target) res = st;\n            if (st==ed && nums[st]==target) res = st;\n            return;\n        }\n        else{\n            int mid = (st+ed)/2;\n            if (target<=nums[mid])\n                binarySearchInsert(nums, target, st, mid, res);\n            else\n                binarySearchInsert(nums, target, mid+1, ed, res);\n        }\n    }\n\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        int res = 0;\n        binarySearchInsert(nums, target, 0, nums.size()-1, res);\n        return res;\n    }\n};"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}