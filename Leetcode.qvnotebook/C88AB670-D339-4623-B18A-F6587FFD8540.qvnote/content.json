{
  "title": "101. Symmetric Tree",
  "cells": [
    {
      "type": "markdown",
      "data": "# 101 Symmetric Tree\n- **Depth-first Search** + tree\n- **Breadth-first Search** + tree\n\n## Description\n![IMAGE](quiver-image-url/D963848D60CC9E359BFEAAC72E74C0B2.jpg)\n\n## 1. Thought line\n\n\n## 2. **Breadth-first Search** + tree"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\nprivate:\n    bool BreadthFirstSearchSymmetric(TreeNode* leftNode, TreeNode* rightNode){\n        if (!leftNode && !rightNode) return true;\n        if (leftNode && rightNode){\n            return ((leftNode->val == rightNode->val) && BreadthFirstSearchSymmetric(leftNode->left, rightNode->right) && BreadthFirstSearchSymmetric(leftNode->right, rightNode->left));\n        }\n        return false;\n    }\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if (root==nullptr) return true;\n        return BreadthFirstSearchSymmetric(root->left, root->right);\n    }\n};"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}