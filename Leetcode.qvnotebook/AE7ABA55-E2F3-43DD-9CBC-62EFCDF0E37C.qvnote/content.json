{
  "title": "063. Unique Paths II",
  "cells": [
    {
      "type": "markdown",
      "data": "# 063 Unique Paths II\n- **Dynamic Programming**+Array\n\n## Description\n![IMAGE](quiver-image-url/7BCEACB9EF8B7947A2DEB2D56609C699.jpg)\n\n## 1. Thought line\n\n\n\n## 2. **Dynamic Programming**+Array"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        if (obstacleGrid.empty()) return 0;\n        int m = obstacleGrid.size(), n = obstacleGrid[0].size();\n        int Possibility [m][n] = {0};\n        \n        // initiate Possibility array\n        bool flagi = false, flagj = false;\n        for (int i= 0; i<=m-1; ++i){\n            if (obstacleGrid[i][0]==1 || flagi){\n                flagi = true;\n                Possibility[i][0] = 0;\n            }\n            else if(!flagi)\n                Possibility[i][0] = 1;\n        }\n       \n        for (int j= 0; j<=n-1; ++j){\n            if (obstacleGrid[0][j]==1 || flagj){\n                flagj = true;\n                Possibility[0][j] = 0;\n            }\n            else if (!flagj)\n                Possibility[0][j] = 1;\n        }\n        \n        // dp\n        for (int i=1; i<=m-1; ++i){\n            for (int j=1; j<=n-1; ++j){\n                if (obstacleGrid[i][j]!=1)\n                    Possibility[i][j] = Possibility[i-1][j]+Possibility[i][j-1];\n            }\n            \n        }\n        return Possibility[m-1][n-1];\n        \n    }\n};"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}