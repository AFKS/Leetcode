{
  "title": "105. Construct Binary Tree from Preorder and Inorder Traversal",
  "cells": [
    {
      "type": "markdown",
      "data": "# 105 Construct Binary Tree from Preorder and Inorder Traversal\n\n## Description\n\n>Given preorder and inorder traversal of a tree, construct the binary tree.\n>\n>**Note:**\n>You may assume that duplicates do not exist in the tree.\n>\n>Preorder: 根左右\n>\n>Inorder: 左根右\n## Solution\n\n-  **Tree**\n-  **Depth-first Search**\n-  **Array**\n-  **Stack**\n\n### Depth-first Search\n"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\n"
    },
    {
      "type": "markdown",
      "data": "### Stack\n\n>The idea is as follows:\n>\n>1. Keep pushing the nodes from the preorder into a stack (and keep making the tree by adding nodes to the left of the previous node) until the top of the stack matches the inorder.\n>\n>2. At this point, pop the top of the stack until the top does not equal inorder (keep a flag to note that you have made a pop).\n>\n>3. Repeat 1 and 2 until preorder is empty. The key point is that whenever the flag is set, insert a node to the right and reset the flag.\n>\n"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "class Solution {\npublic:\n    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {\n        \n        if(preorder.size()==0) \n            return NULL;\n        \n        int i = 0; // index for perorder\n        int j = 0; // index for inorder\n        int f = 0; // insert right child flag\n        \n        TreeNode* root = new TreeNode(preorder[i]);\n        TreeNode* cur = root;\n        \n        \n        stack<TreeNode *> st; //\n        st.push(root);\n        i++;\n        \n        while(i<preorder.size())\n        {\n            if(!st.empty() && st.top()->val==inorder[j])\n            {\n                cur = st.top();\n                st.pop();\n                f = 1;\n                j++;\n            }\n            else\n            {\n                if(f==0)\n                {\n                    cur -> left = new TreeNode(preorder[i]);\n                    cur = cur -> left;\n                    st.push(cur);\n                    i++;\n                }\n                else // whenever the flag is set, insert a node to the right and reset the flag.\n                {\n                    f = 0;\n                    cur -> right = new TreeNode(preorder[i]);\n                    cur = cur -> right;\n                    st.push(cur);\n                    i++;\n                }\n            }\n        }\n        return root;\n    }\n};"
    }
  ]
}