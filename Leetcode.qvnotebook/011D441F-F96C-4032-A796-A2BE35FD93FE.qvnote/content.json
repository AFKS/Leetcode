{
  "title": "160 Intersection of Two Linked Lists",
  "cells": [
    {
      "type": "markdown",
      "data": "# 160 Intersection of Two Linked Lists\n\n## Description\n> Write a program to find the node at which the intersection of two singly \n> linked lists begins.\n>\n> <pre>\n> For example, the following two linked lists:\n> A:          a1 → a2\n>                    ↘\n>                      c1 → c2 → c3\n>                    ↗            \n> B:     b1 → b2 → b3\n> begin to intersect at node c1.\n> </pre>\n>\n> Notes:\n>\n> If the two linked lists have no intersection at all, return null.\n> The linked lists must retain their original structure after the function \n> returns.\n> You may assume there are no cycles anywhere in the entire linked structure.\n> Your code should preferably run in O(n) time and use only O(1) memory.\n>\n\n\n## Solution\n- **Linked List**\n- ...\n\n\n### Linked List"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* node){\n        ListNode* res = nullptr;\n        ListNode* ptr = node;\n        while(ptr!=nullptr){\n            ListNode* tempNode = new ListNode(ptr->val);\n            tempNode->next = res;\n            res = tempNode;\n            ptr = ptr->next;\n        }\n        return res;\n    }\n    \n    \n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* headANew = reverseList(headA);\n        ListNode* headBNew = reverseList(headB);\n        ListNode* res = nullptr;\n        \n        while(headANew!=nullptr&&headBNew!=nullptr){\n            if(headANew->val==headBNew->val){\n                ListNode* temp = new ListNode(headANew->val);\n                temp->next = res;\n                res = temp;\n            }\n            \n            headANew = headANew->next;\n            headBNew = headBNew->next;\n        }\n        return res;\n    }\n};"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}