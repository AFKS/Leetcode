{
  "title": "150. Evaluate Reverse Polish Notation",
  "cells": [
    {
      "type": "markdown",
      "data": "# 150 Evaluate Reverse Polish Notation\n\n## Description\n> Evaluate the value of an arithmetic expression in Reverse Polish Notation.Valid operators are +, -, *, /. Each operand may be an integer or another expression.\n> Some examples:\n> ```\n> [\"2\", \"1\", \"+\", \"3\", \"*\"] -> ((2 + 1) * 3) -> 9\n> [\"4\", \"13\", \"5\", \"/\", \"+\"] -> (4 + (13 / 5)) -> 6\n> ```\n\n\n## Solution\n- **Stack+iteratively**\n- **Hash Table**\n- **Tree**\n\n\n### Stack"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "void math(string opt, stack<int>& stk){\n    if (stk.size()>=2){\n        int b = stk.top();\n        stk.pop();\n        int a = stk.top();\n        stk.pop();\n        if (opt==\"+\") stk.push(a+b);\n        if (opt==\"-\") stk.push(a-b);\n        if (opt==\"*\") stk.push(a*b);\n        if (opt==\"/\"&&b!=0) stk.push(a/b);\n    }\n    \n}\n\n\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> stk;\n        for (int i=0;!tokens.empty()&&i<=tokens.size()-1;++i){\n            string cur = tokens[i];\n            if (cur==\"+\" || cur==\"-\"||cur==\"*\"||cur==\"/\")\n                math(cur,stk);\n            else\n                stk.push(stoi(cur));\n        }\n        if (stk.empty()) return 0;\n        return stk.top();\n    }\n};"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}