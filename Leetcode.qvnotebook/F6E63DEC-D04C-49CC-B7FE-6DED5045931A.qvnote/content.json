{
  "title": "091. Decode Ways",
  "cells": [
    {
      "type": "markdown",
      "data": "# 091 Decode Ways\n- **Dynamic Programming** + String\n\n## Description\n![IMAGE](quiver-image-url/7534CAB94A49006725A4A0DE694BA5D2.jpg)\n\n## 1. Thought line\n(1) corner cases at res[0], res[1], res[2];\n- res[0] is always 0;\n- res[1] is 0 or 1;\n- res[2] is 0, 1, or 2;\n\n## 2. **Dynamic Programming** + String"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "class Solution {\npublic:\n    int numDecodings(string s) {\n        vector<int> res(s.size()+1,0);\n        res[0] = 0;\n        res[1] = (s[0]=='0') ? 0 : 1;\n        for (int i = 1; !s.empty()&&i<=s.size()-1; ++i){\n            // detect if can move from 1 steps away\n            if (s[i]!='0') \n                res[i+1] += res[i];\n            // detect if can move from 2 steps away\n            if (s[i-1]=='1' || (s[i-1]=='2' && s[i]<='6'))\n                res[i+1] = (i>1) ? res[i+1]+res[i-1] : res[i+1]+1;\n            \n            if (res[i+1]==0)\n                break;\n        }\n        return res[s.size()];\n    }\n};"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}